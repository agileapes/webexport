Operation {
    transformers: {
        com.agileapes.webexport.url.transform.impl.SessionAddressTransformer,
        com.agileapes.webexport.url.transform.impl.ParameterAddressTransformer {
            pattern: /.*user.*/i
        },
        com.agileapes.webexport.url.transform.impl.ParameterAddressTransformer {
            pattern: /.*rand.*/i
        },
        com.agileapes.webexport.url.transform.impl.ParameterAddressTransformer {
            pattern: /.*seed.*/i
        },
        com.agileapes.webexport.url.transform.impl.ParameterAddressTransformer {
            pattern: /.*ref.*/i
        }
    }
    output: /Users/milad/Downloads/crawl
    start: {
        http://en.wikipedia.org/wiki/
        http://fa.wikipedia.org/wiki/
    }
    workers: 10
}

Redirections {

    (target.protocol !~ "http|https" || target.domain ~ ".*\.google\.com" || target.domain == "google.com") -
    (target.context == "/" && target.parameters ^ "query") com.agileapes.webexport.parse.ipml.SearchPageParser
    (target.port == 33 && target.parameters[user] == "root") -
    (target.depth > 3) -
    (target.headers[Content-Type] == "image/jpeg") com.agileapes.webexport.parse.ipml.JpegImageParser
    (target.timestamp < now - 600) -
    (target.address ~ ".*\.jpg" && target.headers[Content-Type] == "image/jpeg") JpegImageParser
    (target.headers[Last-Update] < target.timestamp - 600) -
    (target.headers[X-.*]) -
    (target.context ~ ".*rss\.xml" && (target.domain ~ "blog\..*" || target.domain ~ "wiki\..*")) com.agileapes.webexport.parse.ipml.RssFeedParser
    (target.domain != origin.domain) -
    (target.domain != start.domain) -
    (target.content > 1024) -
    (target.headers[Content-Length] > 1024) -
    (target.headers[Content-Type] == "text/html") htmlParser
    (target.domain ~ "blog\..*" && target.headers[Content-Type] == "text/html") blogPost

}

Parsers {

    Parser blogPost {
        type: "Post",
        id: replace(target.context, ".*?/([^/]+)\.html", "$1"),
        body: get(dom(target.content, "/html//body/table/tr[class=body]"), 0),
        author: get(dom(target.content, "/html//body/table/tr{next('tr[class=body]')}/td"), 0),
        date: call("com.agileapes.utils.DateUtils.convertJalaliToTimestamp", get(dom(target.content, "/html//body/table/tr{next('tr[class=body]')}/td"), 1)),
        tags: split(get(dom(target.content, "/html//body/table/tr{next('tr[class=body]')}/td"), 2), ",")
    }

    Parser htmlParser {
        type: "Html",
        body: get(dom(target.content, "/html//body"), 0)
    }

}

Decorators {

    FreemarkerDecorator blogPostDecorator {
        on: "afterParse",
        when: meta.type == "Post",
        output: "posts/${meta.id}.xml",
        template: {
            <?xml version="1.0">
            <post id="${meta.id}">
                <title>${meta.title}</title>
                <author>${meta.author}</author>
                <date>${meta.date}</date>
                <tags>
                <#list meta.tags as tag>
                    <tag>${tag}</tag>
                </#list>
                </tags>
                <body><![CDATA[${meta.body}]]></body>
            </post>
        }
    }

    FreemarkerDecorator blogPostsDecorator {
        on: "beforeShutdown",
        when: meta.type == "Post",
        output: "posts/all.xml",
        template: {
            <?xml version="1.0">
            <posts count="${meta?size}">
            <#list items.posts as meta>
                <post id="${meta.id}">
                    <title>${meta.title}</title>
                    <author>${meta.author}</author>
                    <date>${meta.date}</date>
                    <tags>
                    <#list meta.tags as tag>
                        <tag>${tag}</tag>
                    </#list>
                    </tags>
                    <body><![CDATA[${meta.body}]]></body>
                </post>
            </#list>
            </posts>
        }
    }

    FreemarkerDecorator contentDecorator {
        on: "beforeShutdown",
        when: true,
        output: "all.xml",
        templateFile: "/Users/milad/Documents/beans.ftl"
    }

    JdbcDecorator blogPostTagWriter {
        on: "afterParse",
        when: meta.type == "Post",
        connectionString: "jdbc:mysql://localhost/test",
        username: "root",
        password: "qaz123456",
        type: "insert",
        breakOnError: false,
        type: "generic",
        sql: {
                <#list meta.tags as tag>
                INSERT INTO `tags`(`tag`, `post_id`) VALUES(`${tag}`, `${meta.id}`);
                </#list>
            }

    }

    JdbcDecorator blogPostWriter {
        on: "afterParse",
        when: meta.type == "Post",
        connectionString: "jdbc:mysql://localhost/test",
        username: "root",
        password: "qaz123456",
        type: "insert",
        breakOnError: false,
        type: "insert",
        table: "posts",
        values: {
            id: "${meta.id}",
            title: "${meta.title}",
            author: "${meta.author}",
            date: "${meta.date}",
            body: "${meta.body}"
        }
    }

    JdbcDecorator blogPostCount {
        on: "afterParse",
        when: meta.type == "Post",
        connectionString: "jdbc:mysql://localhost/test",
        username: "root",
        password: "qaz123456",
        type: "insert",
        breakOnError: false,
        type: "update",
        table: "posts_meta",
        values: {
            count: "count + 1"
        }
    }

}
